{"version":3,"file":"static/webpack/static/development/pages/_app.js.21affc28787339e29b3f.hot-update.js","sources":["webpack:///./lib/initApollo.ts"],"sourcesContent":["// easy config defaults for connecting Apollo Client to GQL backend\nimport { ApolloClient, InMemoryCache, NormalizedCacheObject } from \"apollo-boost\";\n// set and cache request context, make available throughout app\nimport { setContext } from \"apollo-link-context\";\n// connect to gql over http\nimport { createHttpLink } from \"apollo-link-http\";\nimport fetch from \"isomorphic-unfetch\";\nimport { COOKIE_NAME, GRAPHQL_SERVER_URL } from \"../constants/frontEndConstants\";\nimport { isBrowser } from \"./isBrowser\";\n\nlet apolloClient: ApolloClient<NormalizedCacheObject> | null = null;\n\n// Polyfill fetch() if running on the server (used by apollo-client)\nif (!isBrowser) {\n    (global as any).fetch = fetch;  // attaching fetch to NodeJS.global \n}\n\ninterface Options {\n    getToken: () => string;\n}\n\n// initialState is the cache and cache can store pretty much anything\nfunction create(initialState: any, { getToken }: Options) {\n    const httpLink = createHttpLink({\n        uri: `${GRAPHQL_SERVER_URL}`,\n        credentials: \"include\"\n    });\n\n    // destructure headers from request object, get token from it and\n    // add as cookie property back into headers, if found\n    const authLink = setContext((_, { headers }) => {\n        const token = getToken(); // passed in from initApollo setup\n        return {\n            headers: {\n                ...headers,\n                cookie: token ? `${COOKIE_NAME}=${token}` : \"\"\n            }\n        };\n    });\n\n    // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n    return new ApolloClient({\n        connectToDevTools: isBrowser,\n        ssrMode: !isBrowser, // Disables forceFetch on the server (so queries are only run once)\n        link: authLink.concat(httpLink),\n        cache: new InMemoryCache().restore(initialState || {})\n    });\n}\n\nexport default function initApollo(initialState: any, options: Options) {\n    // Make sure to create a new client for every server-side request so that data\n    // isn't shared between connections (which would be bad)\n    if (!isBrowser) {\n        return create(initialState, options);\n    }\n\n    // Reuse client on the client-side\n    if (!apolloClient) {\n        apolloClient = create(initialState, options);\n    }\n\n    return apolloClient;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AAFA;AADA;AAMA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}